package cmd

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *WalkDirOptions) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 7 {
		err = msgp.ArrayError{Wanted: 7, Got: zb0001}
		return
	}
	z.Bucket, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Bucket")
		return
	}
	z.BaseDir, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "BaseDir")
		return
	}
	z.Recursive, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "Recursive")
		return
	}
	z.ReportNotFound, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "ReportNotFound")
		return
	}
	z.FilterPrefix, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "FilterPrefix")
		return
	}
	z.ForwardTo, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "ForwardTo")
		return
	}
	z.Limit, err = dc.ReadInt()
	if err != nil {
		err = msgp.WrapError(err, "Limit")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *WalkDirOptions) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 7
	err = en.Append(0x97)
	if err != nil {
		return
	}
	err = en.WriteString(z.Bucket)
	if err != nil {
		err = msgp.WrapError(err, "Bucket")
		return
	}
	err = en.WriteString(z.BaseDir)
	if err != nil {
		err = msgp.WrapError(err, "BaseDir")
		return
	}
	err = en.WriteBool(z.Recursive)
	if err != nil {
		err = msgp.WrapError(err, "Recursive")
		return
	}
	err = en.WriteBool(z.ReportNotFound)
	if err != nil {
		err = msgp.WrapError(err, "ReportNotFound")
		return
	}
	err = en.WriteString(z.FilterPrefix)
	if err != nil {
		err = msgp.WrapError(err, "FilterPrefix")
		return
	}
	err = en.WriteString(z.ForwardTo)
	if err != nil {
		err = msgp.WrapError(err, "ForwardTo")
		return
	}
	err = en.WriteInt(z.Limit)
	if err != nil {
		err = msgp.WrapError(err, "Limit")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *WalkDirOptions) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 7
	o = append(o, 0x97)
	o = msgp.AppendString(o, z.Bucket)
	o = msgp.AppendString(o, z.BaseDir)
	o = msgp.AppendBool(o, z.Recursive)
	o = msgp.AppendBool(o, z.ReportNotFound)
	o = msgp.AppendString(o, z.FilterPrefix)
	o = msgp.AppendString(o, z.ForwardTo)
	o = msgp.AppendInt(o, z.Limit)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *WalkDirOptions) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 7 {
		err = msgp.ArrayError{Wanted: 7, Got: zb0001}
		return
	}
	z.Bucket, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Bucket")
		return
	}
	z.BaseDir, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "BaseDir")
		return
	}
	z.Recursive, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Recursive")
		return
	}
	z.ReportNotFound, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ReportNotFound")
		return
	}
	z.FilterPrefix, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "FilterPrefix")
		return
	}
	z.ForwardTo, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ForwardTo")
		return
	}
	z.Limit, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Limit")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *WalkDirOptions) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.Bucket) + msgp.StringPrefixSize + len(z.BaseDir) + msgp.BoolSize + msgp.BoolSize + msgp.StringPrefixSize + len(z.FilterPrefix) + msgp.StringPrefixSize + len(z.ForwardTo) + msgp.IntSize
	return
}
